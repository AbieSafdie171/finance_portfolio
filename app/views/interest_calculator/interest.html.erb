    <%= stylesheet_link_tag 'interest_calculator', media: 'all' %>
    <div class="total-balance-container">
        <div class="total-balance">
            <h2>Total Balance: <span id="balance-amount">$</span></h2>
        </div>
    </div>

    <div class="investment-container">
        <div class="investment-information">
            <h3>Investment Information</h3>

            <div class="form-group">
                <label for="starting_balance">Starting Balance</label>
                <input type="number" id="starting_balance" name="starting_balance" placeholder="$5,000" />
            </div>

            <div class="form-group">
                <label for="contribution_amount">Contribution (Per Year)</label>
                <input type="number" id="contribution_amount" name="contribution_amount" placeholder="$100" />
            </div>

            <div class="form-group">
                <label for="time_to_grow">Time to Grow (Years)</label>
                <input type="number" id="time_to_grow" name="time_to_grow" placeholder="5" max="1000" step="1"/>
            </div>

            <div class="form-group">
                <label for="interest_rate">Annual Interest Rate</label>
                <input type="number" id="interest_rate" name="interest_rate" placeholder="5%" />
            </div>
        </div>

        <div class="chart-section">
            <canvas id="investmentChart"></canvas>
            <script>
                console.log("HELLO WORLD THIS IS INTEREST CALCULATOR");
                // Function to calculate the future value and principal
                function calculateFutureValue(startingBalance, interestRate, years, contribution) {

                    let principalData = [];
                    let interestData = [];
                    let totalData = [];
                    let labels = [];
                    let interest = 0;
                    let principal = startingBalance;
                    interestRate = interestRate / 100;

                    principalData.push(principal);
                    interestData.push(interest);
                    totalData.push(principal + interest);
                    labels.push(`Year 0`);

                    if (years > 1000)
                		return { principalData, interestData, totalData, labels, finalValue: totalData[years] };
                    
                    for (let i = 1; i <= years; i++) {
                        const principal_interest = principal * interestRate;
                        // console.log("Principal Interest: ", principal_interest);

                        interest = interest + (interest * interestRate);
                        interest += principal_interest;
                        principal += contribution;

                        principalData.push(principal);
                        interestData.push(interest);
                        totalData.push(principal + interest);
                        labels.push(`${i}`);
                    }
                    
                    return { principalData, interestData, totalData, labels, finalValue: totalData[years] };
                }

                // Function to update the chart and total balance
                function updateChart() {
                    const startingBalance = parseFloat(document.getElementById('starting_balance').value) || 0;
                    const interestRate = parseFloat(document.getElementById('interest_rate').value) || 0;
                    const years = parseInt(document.getElementById('time_to_grow').value) || 0;
                    const contribution = parseInt(document.getElementById('contribution_amount').value) || 0;

                    const { principalData, interestData, totalData, labels, finalValue } = calculateFutureValue(startingBalance, interestRate, years, contribution);

                    investmentChart.data.labels = labels;
                    investmentChart.data.datasets[0].data = principalData;
                    investmentChart.data.datasets[1].data = interestData;
                    investmentChart.data.datasets[2].data = totalData;
                    investmentChart.update();

                    // Update the total balance amount
                    var money = finalValue.toFixed(2);
                    let decimal_portion = money.slice(-3);
                    let c = 0;
                    let final_representation = "";

                    for (let i = (money.length - 4); i >= 0; i--) {
                        if (c == 3) {
                            final_representation = ',' + final_representation;
                            c = 0;
                        }
                        c += 1;
                        final_representation = money[i] + final_representation;
                    }

                    final_representation += decimal_portion;

                    document.getElementById('balance-amount').textContent = '$' + final_representation;
                }

                // Initialize the chart
                var interest_ctx = document.getElementById('investmentChart').getContext('2d');
                var investmentChart = new Chart(interest_ctx, {
                    type: 'line',
                    data: {
                        labels: [],  // Initially empty, will be filled with user input
                        datasets: [
                            {
                                label: 'Principal Balance',
                                data: [],  // Initially empty, will be filled with user input
                                borderColor: 'rgba(54, 162, 235, 1)',
                                backgroundColor: 'rgba(54, 162, 235, 0.1)',
                                fill: true,
                                tension: 0.4,
                            },
                            {
                                label: 'Interest Earned',
                                data: [],  // Initially empty, will be filled with user input
                                borderColor: 'rgba(0, 128, 0, 1)',
                                backgroundColor: 'rgba(0, 128, 0, 0.1)',
                                fill: true,
                                tension: 0.4,
                            },
                            {
                                label: 'Total Earned',
                                data: [],  // Initially empty, will be filled with user input
                                borderColor: 'rgba(0, 0, 0, 1)', 
                                backgroundColor: 'rgba(0, 0, 0, 0.1)',
                                fill: true,
                                tension: 0.4,
                            }
                        ]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: function(value) {
                                        return '$' + value.toLocaleString();  // Format the Y-axis labels as currency
                                    }
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                display: true
                            }
                        }
                    }
                });

                // Add event listeners to update the chart and total balance when input values change
                document.getElementById('starting_balance').addEventListener('input', updateChart);
                document.getElementById('interest_rate').addEventListener('input', updateChart);
                document.getElementById('time_to_grow').addEventListener('input', updateChart);
                document.getElementById('contribution_amount').addEventListener('input', updateChart);

                // Initialize chart with default values
                updateChart();
            </script>
        </div>
    </div>
<div class="accountant-oat">
  <%= image_tag 'donut.jpg', id: 'accountant-oat-image', class: 'oat-accountant-specs', alt: 'Oat Explanation' %>
  <div class="text-content">
    <h3><b>Accountant Oat's Friendly Advice:</b> Use this graph to learn the powers of compounding interest!</h3>
    <br/>
    <p>	I use the power of compounding interest to fuel my financial growth! By the age of 1, I was able to open 3 bakeries across the Santa Barbara area... and I get free donuts everyday because of them! </p>
    <br/>
    <p>
    	I also have my own personal chef, chauffeur, and tennis ball tosser. If you want to be like me, start investing!
    </p>
  </div>
</div>





